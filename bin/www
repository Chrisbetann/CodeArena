#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');                              // Import the Express application
var debug = require('debug')('untitled2:server');         // Debugging utility
var http = require('http');                               // Node's HTTP module
var socketIo = require('socket.io');                      // Socket.IO for realâ€‘time communication

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');    // Determine port number
app.set('port', port);                                    // Make port available via app

/**
 * Create HTTP server.
 */
var server = http.createServer(app);                      // Wrap Express app in an HTTP server

/**
 * Attach Socket.IO to the server.
 */
var io = socketIo(server);                                // Initialize Socket.IO with the HTTP server

// Expose Socket.IO instance on the Express app (so routes can emit events)
app.set('io', io);

/**
 * Socket.IO connection handler
 */
io.on('connection', (socket) => {
  console.log('A user connected:', socket.id);

  // Handle custom "joinLobby" event from clients
  socket.on('joinLobby', (data) => {
    if (!data.lobbyCode || !data.username) {
      console.error('joinLobby event received with missing data');
      return;
    }
    console.log(`${data.username} is joining lobby ${data.lobbyCode}`);

    socket.join(data.lobbyCode);                          // Add this socket to the room

    // Notify all clients in the room that a new user joined
    io.to(data.lobbyCode).emit('lobbyUpdate', {
      message: `${data.username} has joined the lobby`
    });
  });

  // Additional events (e.g., answer submissions) could be handled here

  socket.on('disconnect', () => {
    console.log('User disconnected:', socket.id);
  });
});

/**
 * Listen on the configured port.
 */
server.listen(port, () => {
  debug('Express server listening on port ' + port);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var portNum = parseInt(val, 10);

  if (isNaN(portNum)) {
    // Named pipe
    return val;
  }

  if (portNum >= 0) {
    // Port number
    return portNum;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // Handle specific listen errors with messages and exit
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
